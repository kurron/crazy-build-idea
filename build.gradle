buildscript {
    ext {
        springBootVersion = '1.2.0.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'groovy'
apply plugin: 'spring-boot' 
apply plugin: 'checkstyle'
apply plugin: 'codenarc'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'idea'

jar {
    baseName = 'demo'
    version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
}

ext {
    spockVersion = '0.7-groovy-2.0'
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter")
    compile("org.codehaus.groovy:groovy")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile( "org.spockframework:spock-spring:${spockVersion}" ) {
        exclude module: 'groovy-all'
        exclude module: 'junit-dep'
    }
}

// for all tests
test {
    scanForTestClasses = false
    includes = []
    excludes = ['**/*Test.class']
    maxParallelForks = Runtime.runtime.availableProcessors()
}

jacocoTestReport.group = 'Verification'

task ciSourceInspection {
    group = 'Continuous Integration'
    description = 'Runs source code inspections'
}
ciSourceInspection.dependsOn checkstyleMain, checkstyleTest, codenarcMain, codenarcTest

task ciAssemble {
    group = 'Continuous Integration'
    description = 'compiles, assembles and inspects the code'
}

ciAssemble.dependsOn  assemble, ciSourceInspection

task ciUnitTest( type: Test ) {
    group = 'Continuous Integration'
    description = 'Run unit-level tests'
    scanForTestClasses = false
    includes = ['**/*UnitTest.class']
    maxParallelForks = Runtime.runtime.availableProcessors()
    testLogging.showStandardStreams = true
}

ciUnitTest.dependsOn ciAssemble

task ciFunctionalTest( type: Test ) {
    group = 'Continuous Integration'
    description = 'Runs functional tests'
    scanForTestClasses = false
    includes = ['**/*ComponentTest.class']
    maxParallelForks = Runtime.runtime.availableProcessors()
    testLogging.showStandardStreams = true
}

ciFunctionalTest.dependsOn ciUnitTest

task ciByteCodeInspection {
    group = 'Continuous Integration'
    description = 'Runs byte code inspections'
}
ciByteCodeInspection.dependsOn ciFunctionalTest

task ciPublication {
    group = 'Continuous Integration'
    description = 'Publishes verified artifacts'
}
ciPublication.dependsOn ciByteCodeInspection, javadoc, groovydoc, publish, publishToMavenLocal

task ciRegistration {
    group = 'Continuous Integration'
    description = 'Registers the artifact with the self-service deployment system'
}
ciPublication.dependsOn ciRegistration
