buildscript {
    ext {
        springBootVersion = '1.2.0.RELEASE'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
    }
}

apply plugin: 'groovy'
apply plugin: 'spring-boot' 
apply plugin: 'checkstyle'
apply plugin: 'codenarc'
apply plugin: 'maven-publish'
apply plugin: 'jacoco'
apply plugin: 'idea'

jar {
    baseName = 'demo'
    version = '0.0.1-SNAPSHOT'
}

sourceCompatibility = 1.8
targetCompatibility = 1.8

repositories {
    jcenter()
}

group = 'org.kurron'
version = '0.1.0'

ext {
    spockVersion = '0.7-groovy-2.0'
}

dependencies {
    compile("org.springframework.boot:spring-boot-starter")
    compile("org.codehaus.groovy:groovy")
    testCompile("org.springframework.boot:spring-boot-starter-test")
    testCompile( "org.spockframework:spock-spring:${spockVersion}" ) {
        exclude module: 'groovy-all'
        exclude module: 'junit-dep'
    }
}

// for all tests
test {
    scanForTestClasses = false
    includes = []
    excludes = ['**/*Test.class']
    maxParallelForks = Runtime.runtime.availableProcessors()
}


task sourceCodeInspection {
    group = 'Continuous Integration'
    description = 'Runs source code inspections'
}
sourceCodeInspection.dependsOn checkstyleMain, checkstyleTest, codenarcMain, codenarcTest

task unitTest( type: Test ) {
    group = 'Continuous Integration'
    description = 'Run unit-level tests'
    scanForTestClasses = false
    includes = ['**/*UnitTest.class']
    maxParallelForks = Runtime.runtime.availableProcessors()
    testLogging.showStandardStreams = true

}
unitTest.dependsOn testClasses

task componentTest( type: Test ) {
    group = 'Continuous Integration'
    description = 'Runs component-level tests'
    scanForTestClasses = false
    includes = ['**/*ComponentTest.class']
    maxParallelForks = Runtime.runtime.availableProcessors()
    testLogging.showStandardStreams = true
}
componentTest.dependsOn testClasses

task integrationTest( type: Test ) {
    group = 'Continuous Integration'
    description = 'Runs integration-level tests'
    scanForTestClasses = false
    includes = ['**/*IntegrationTest.class']
    maxParallelForks = Runtime.runtime.availableProcessors()
    testLogging.showStandardStreams = true
}
integrationTest.dependsOn testClasses

task codeCoverageReport( type:JacocoReport ){
    executionData = files( "$buildDir/jacoco/componentTest.exec",
                           "$buildDir/jacoco/integrationTest.exec",
                           "$buildDir/jacoco/unitTest.exec" )
    sourceDirectories = files( "$projectDir/src/main/groovy", "$projectDir/src/main/java" )
    classDirectories = files( "$projectDir/build/classes/main" )

    group = 'Continuous Integration'
    reports {
        xml.enabled true
        csv.enabled false
        html.enabled true
    }
}

task byteCodeInspection {
    group = 'Continuous Integration'
    description = 'Runs byte code inspections'
}
byteCodeInspection.dependsOn codeCoverageReport

task publication {
    group = 'Continuous Integration'
    description = 'Publishes verified artifacts'
}
//publication.dependsOn publish, publishToMavenLocal
publication.dependsOn publishToMavenLocal

task registration {
    group = 'Continuous Integration'
    description = 'Registers the artifact with the self-service deployment system'
}

task sourceJar( type: Jar ) {
    from( sourceSets.main.java, sourceSets.main.groovy )
    classifier 'source'
}

task testSourceJar( type: Jar ) {
    from( sourceSets.test.java, sourceSets.test.groovy )
    classifier 'test-source'
}

publishing {
    repositories {
        maven {
            url = 'http://192.168.254.81:81/artifactory/publishing-test'
            credentials {
                username = 'SVNBuild'
                password = 'Snoopy*09'
            }
        }
    }
    publications {
        source( MavenPublication ) {
            artifact( sourceJar ) {
                classifier = 'source'
            }
        }
        testSource( MavenPublication ) {
            artifact( testSourceJar ) {
                classifier = 'test-source'
            }
        }
    }
}

task stageOne {
    group = 'Continuous Integration'
    description = 'Executes the first stage of the CI build pipeline'
}
stageOne.dependsOn assemble, testClasses, sourceCodeInspection, javadoc, groovydoc, sourceJar, testSourceJar

task stageTwo {
    group = 'Continuous Integration'
    description = 'Executes the second stage of the CI build pipeline'
}
stageTwo.dependsOn unitTest

task stageThree {
    group = 'Continuous Integration'
    description = 'Executes the third stage of the CI build pipeline'
}
stageThree.dependsOn componentTest, integrationTest

task stageFour {
    group = 'Continuous Integration'
    description = 'Executes the fourth stage of the CI build pipeline'
}
stageFour.dependsOn byteCodeInspection

task stageFive {
    group = 'Continuous Integration'
    description = 'Executes the fifth stage of the CI build pipeline'
}
stageFive.dependsOn publication, registration
